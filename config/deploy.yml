<% require "dotenv"; Dotenv.load(".env") %>
# Name of your application. Used to uniquely configure containers.
service: autosale_backend

# Name of the container image.
image: mateuszbialowas/autosale_backend

# Deploy to these servers.
servers:
  web:
    - admin.mmoutlet24.pl
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: admin.mmoutlet24.pl

# Credentials for your image host.
registry:
  username: mateuszbialowas
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
  clear:
    HOST: admin.mmoutlet24.pl
    RAILS_ENV: production
    DB_HOST: autosale_backend-postgres
    SOLID_QUEUE_IN_PUMA: true
    RAILS_LOG_LEVEL: debug
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_TO_STDOUT: true

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "autosale_backend_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.3.0
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
 db:
   image: postgres:16-alpine
   host: 116.203.100.28
   # Change to 3306 to expose port to the world instead of just local network.
   port: 5432
   options:
     restart: always
   env:
     clear:
       POSTGRES_USER: postgres
       POSTGRES_DB: autosale_backend_production
     secret:
       - POSTGRES_PASSWORD
   files:
     - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
   directories:
     - data:/var/lib/postgresql/data
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
